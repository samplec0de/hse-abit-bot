import logging
import math
import os
import time
import traceback
from datetime import datetime
from typing import Any, List, Dict
from uuid import uuid4

import pymongo
import requests
import urllib3
import xlrd
import xmltodict
from pymongo.collection import Collection
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, \
    InlineQueryResultArticle, InputTextMessageContent, CallbackQuery, ParseMode
from telegram.ext import Updater, CallbackContext, CommandHandler, MessageHandler, Filters, InlineQueryHandler, \
    CallbackQueryHandler

import parser

COOLDOWN = 15
CLOSE_MARKUP = InlineKeyboardMarkup([[InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å', callback_data='close')]])
NOT_IMPLEMENTED = '–°–ø–∞—Å–∏–±–æ. –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
CAMPUSES = ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ü–µ—Ä–º—å']
SET_CAMPUS = 0
SET_PROGRAM = 1
SET_FIO = 2
LOOK_PROGRAM = 3


def error(update: Update, context: CallbackContext):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)


def start(update: Update, context: CallbackContext):
    keyboard = [[CAMPUSES[i], CAMPUSES[i + 1]] for i in range(0, len(CAMPUSES), 2)]
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø—É—Å', reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    state.delete_one({'user_id': update.message.chat.id})
    users.delete_one({'user_id': update.message.chat.id})
    set_state(update.message.chat.id, SET_CAMPUS)


def get_state(user_id: int):
    user_state = state.find_one({'user_id': user_id})
    if user_state:
        return user_state['state']


def set_state(user_id: int, new_state: int):
    if not state.find_one_and_update({'user_id': user_id}, {'$set': {'state': new_state}}):
        state.insert_one({'user_id': user_id, 'state': new_state})


def get_user(user_id: int):
    return users.find_one({'user_id': user_id})


def set_user_param(user_id: int, key: str, value: Any):
    return users.find_one_and_update({'user_id': user_id}, {'$set': {key: value}})


def set_campus(update: Update, context: CallbackContext):
    selected_campus = update.message.text
    user_state = get_state(update.message.chat.id)
    if user_state == SET_CAMPUS:
        users.insert_one({'user_id': update.message.chat.id,
                          'username': update.message.chat.username,
                          'campus': selected_campus})
        keyboard = [[InlineKeyboardButton('–ù–∞–π—Ç–∏', switch_inline_query_current_chat='–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ: ')]]
        ReplyKeyboardRemove()
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text('–°–ø–∞—Å–∏–±–æ', reply_markup=ReplyKeyboardRemove())
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏', reply_markup=reply_markup)
        set_state(update.message.chat.id, SET_PROGRAM)
    else:
        update.message.reply_text('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start')


def set_abit(update: Update, context: CallbackContext):
    selected_abit = update.message.text.replace('–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç: ', '')
    user_state = get_state(update.message.chat.id)
    if user_state == SET_FIO:
        set_user_param(update.message.chat.id, 'fio', selected_abit)
        update.message.reply_text('–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –≤ –ø—Ä–æ—à–ª–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.', reply_markup=CLOSE_MARKUP)
        context.bot.delete_message(update.message.chat.id, update.message.message_id)
        context.bot.delete_message(update.message.chat.id, get_user(update.message.chat.id)['bot_temp_message_id'])
    else:
        update.message.reply_text('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start')


def program_board(campus: str, program: str, user: dict):
    xls_id = parser.programs[parser.campus_id[campus]][program]
    stats = program_stats(xls_id)
    xls_url = f'https://priem8.hse.ru/abitreports/bachreports/{xls_id}.xls'
    try:
        req = requests.get(xls_url)
    except urllib3.connection.VerifiedHTTPSConnection as e:
        raise Exception(e)
    if req.status_code != 200:
        raise Exception(f"Status code {req.status_code}")
    book = xlrd.open_workbook(file_contents=req.content)
    sheet = book.sheet_by_index(0)
    for i in range(sheet.ncols):
        value = sheet.cell_value(6, i)
        if value == '–°—É–º–º–∞ –∫–æ–Ω–∫—É—Ä—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤':
            sum_ind = i
        elif value == '–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è':
            edu_form = i
        elif value == '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—â–µ–∂–∏—Ç–∏–µ –Ω–∞ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è':
            dominatory = i
    bvi_count, agreement_count, celevoe_count, osoboe_pravo_count, dormitory_count = 0, 0, 0, 0, 0
    agreement_celevoe_count = 0
    commercial_count, govsponsor_count, combined_count = 0, 0, 0
    ege_govsponsor, bvi, osoboe_pravo, celevoe = [], [], [], []
    total_abits = sheet.nrows - parser.FIRST_ABIT_IND + 1
    program_places = parser.admission[campus].get(program)
    program_places = program_places if program_places is not None else {'–±—é–¥–∂–µ—Ç': stats['govsponsor'],
                                                                        '–æ—Å–æ–±–æ–µ –ø—Ä–∞–≤–æ': 0,
                                                                        '—Ü–µ–ª–µ–≤–æ–µ': 0,
                                                                        '–ø–ª–∞—Ç–Ω–æ–µ': stats['paid'],
                                                                        '–ø–ª–∞—Ç–Ω–æ–µ –¥–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö': 0
                                                                        }
    selected_abit = None
    place, sogl_place = '', ''
    for i in range(parser.FIRST_ABIT_IND, sheet.nrows):
        abit_fio = sheet.cell_value(i, 2)
        abit_score = sheet.cell_value(i, sum_ind)
        abit_bvi = sheet.cell_value(i, 3)
        abit_osoboe_pravo = sheet.cell_value(i, 4)
        abit_celevoi = sheet.cell_value(i, 5)
        abit_agreement = sheet.cell_value(i, 6)
        abit_edu_form = sheet.cell_value(i, edu_form)
        abit_dormitory = sheet.cell_value(i, dominatory)
        bvi_count += 1 if abit_bvi else 0
        agreement_count += 1 if abit_agreement == '–î–∞' else 0
        agreement_celevoe_count += 1 if abit_agreement == '–î–∞' and abit_celevoi == '+' else 0
        celevoe_count += 1 if abit_celevoi == '+' else 0
        osoboe_pravo_count += 1 if abit_osoboe_pravo == '+' else 0
        dormitory_count += 1 if abit_dormitory == '+' else 0
        commercial_count += 1 if '–ö' in abit_edu_form else 0
        govsponsor_count += 1 if '–ë' in abit_edu_form else 0
        combined_count += 1 if edu_form == '–ë,–ö' else 0
        abit = {'fio': abit_fio, 'score': abit_score,
                'bvi': abit_bvi,
                'osoboe_pravo': abit_osoboe_pravo,
                'celevoi': abit_celevoi,
                'agreement': abit_agreement,
                'edu_form': abit_edu_form,
                'dormitory': abit_dormitory
                }
        if abit_bvi:  # –ø–æ –ë–í–ò
            bvi.append(abit)
        elif abit_osoboe_pravo == '+':  # –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ –º–µ—Å—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö –∫–≤–æ—Ç—ã  –¥–ª—è –ª–∏—Ü, –∏–º–µ—é—â–∏—Ö –æ—Å–æ–±–æ–µ –ø—Ä–∞–≤–æ
            osoboe_pravo.append(abit)
        elif abit_celevoi == '+':  # –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ –º–µ—Å—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö –∫–≤–æ—Ç—ã —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–∏–µ–º–∞
            celevoe.append(abit)
        elif '–ë' in abit_edu_form:  # –ü–æ –ï–ì–≠ –Ω–∞ –±—é–¥–∂–µ—Ç
            ege_govsponsor.append(abit)
        if 'fio' in user and user['fio']:
            if user['fio'] == abit_fio:
                selected_abit = abit
                if abit_bvi:
                    sogl_place = f"    üëç –í—ã –ø–æ—Å—Ç—É–ø–∞–µ—Ç–µ –ø–æ –ë–í–ò\n"
                elif abit_osoboe_pravo == '+':
                    sogl_place = agreement_count - len(bvi) + (1 if abit_agreement == '–ù–µ—Ç' else 0)
                elif abit_celevoi == '+':
                    sogl_place = agreement_celevoe_count + (1 if abit_agreement == '–ù–µ—Ç' else 0)
                else:
                    sogl_place = agreement_count
                    place = i - parser.FIRST_ABIT_IND + 1
                    place -= max(0, program_places['—Ü–µ–ª–µ–≤–æ–µ'] - celevoe_count)
                    place -= max(0, program_places['–æ—Å–æ–±–æ–µ –ø—Ä–∞–≤–æ'] - osoboe_pravo_count)
                    place = f"    –ë—é–¥–∂–µ—Ç: {place}\n"
                if type(sogl_place) == int:
                    sogl_place = f"    –ü–æ —Å–æ–≥–ª–∞—Å–∏—è–º: {sogl_place}\n"
    ege_places = stats["govsponsor"] + stats["hsesponsor"]
    ege_places -= bvi_count
    ege_places -= min(osoboe_pravo_count, program_places['–æ—Å–æ–±–æ–µ –ø—Ä–∞–≤–æ'])
    ege_places -= min(celevoe_count, program_places['—Ü–µ–ª–µ–≤–æ–µ'])
    temp_count = 0
    temp_index = 0
    last_abit_score = 0
    while temp_count < ege_places and temp_index < len(ege_govsponsor):
        if ege_govsponsor[temp_index]['agreement'] == '–î–∞':
            temp_count += 1
            last_abit_score = ege_govsponsor[temp_index]['score']
        temp_index += 1
    if ege_places <= 0:
        govsponsor_score = '–ë–í–ò'
    else:
        govsponsor_score = ege_govsponsor[ege_places - 1]['score']
    if len(bvi) <= stats["govsponsor"]:
        is_kvazi = f'‚úÖ –í—Å–µ –±–≤–∏ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –±—é–¥–∂–µ—Ç –∑–∞ —Å—á–µ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞' \
                   f' (—Å–≤–æ–±–æ–¥–Ω–æ {ege_places} –º–µ—Å—Ç –ø–æ –ï–ì–≠)'
    else:
        is_kvazi = '‚ùå –ë–≤–∏ –Ω–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –±—é–¥–∂–µ—Ç –∑–∞ —Å—á–µ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞, ' \
                   '–ø–æ—Å–ª–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ç–æ-—Ç–æ –ø–æ–ø–∞–¥–µ—Ç –Ω–∞ –±—é–¥–∂–µ—Ç –∑–∞ —Å—á—ë—Ç –≤—ã—à–∫–∏.'
    for_user, your_place = '', ''
    if 'fio' in user and user['fio']:
        for_user = f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç: {user['fio']}\n"
        if selected_abit:
            your_place = 'üë§ –í–∞—à–∏ –º–µ—Å—Ç–∞:\n' + place + sogl_place
    message = f'–í—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ <a href="{xls_url}">"{program}" ({campus})</a>\n\n' \
              f'üìÑ –í—Å–µ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏–π: {total_abits}\n' \
              f'üò≥ –ë—é–¥–∂–µ—Ç: {govsponsor_count}/{program_places["–±—é–¥–∂–µ—Ç"]} (–±–≤–∏ {len(bvi)}, ' \
              f'–≤—Å–µ–≥–æ {stats["govsponsor"]} + {stats["hsesponsor"]} –∑–∞ —Å—á—ë—Ç –í–®–≠)\n' \
              f'üí∞ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {commercial_count} (–≤—Å–µ–≥–æ {stats["paid"]})\n' \
              f'ü§ë –ë—é–¥–∂–µ—Ç, –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {combined_count}\n' \
              f'ü§ù –° —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ: {agreement_count}\n' \
              f'üèö –° –æ–±—â–µ–∂–∏—Ç–∏–µ–º: {dormitory_count}\n' \
              f'üòâ –ü–æ –æ—Å–æ–±–æ–º—É –ø—Ä–∞–≤—É: {osoboe_pravo_count}/{program_places["–æ—Å–æ–±–æ–µ –ø—Ä–∞–≤–æ"]}\n' \
              f'üè≠ –¶–µ–ª–µ–≤–æ–µ: {celevoe_count}/{program_places["—Ü–µ–ª–µ–≤–æ–µ"]}\n\n' \
              f'{is_kvazi}\n\n' \
              f'<code>üìä –ü—Ä–æ—Ö–æ–¥–Ω—ã–µ –±—é–¥–∂–µ—Ç:\n' \
              f'    –û–±—â–∏–π: {govsponsor_score}\n' \
              f'    –ü–æ —Å–æ–≥–ª–∞—Å–∏—è–º: {last_abit_score}\n' \
              f'{your_place}</code>' \
              f'{for_user}' \
              f'üïî –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {datetime.now().strftime("%d.%m.%Y %H:%M:%S")} (–±–∞–∑–∞ –í–®–≠: {stats["hsetime"]})'
    return message


def set_program(update: Update, context: CallbackContext):
    selected_program = update.message.text
    user_state = get_state(update.message.chat.id)
    if user_state == SET_PROGRAM:
        users.find_one_and_update({'user_id': update.message.chat.id}, {'$set': {'program': selected_program}})
        user = get_user(update.message.chat.id)
        selected_campus = user['campus']
        try:
            message = program_board(selected_campus, selected_program, user)
            keyboard_inline = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="update")],
                               [InlineKeyboardButton("üìä –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ", callback_data="rating")]]
            update.message.reply_text(message,
                                      reply_markup=InlineKeyboardMarkup(keyboard_inline),
                                      parse_mode=ParseMode.HTML)
            set_state(update.message.chat.id, LOOK_PROGRAM)
        except Exception as e:
            print(traceback.format_exc())
            update.message.reply_text('–û–π! –ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ –í–®–≠. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–¥–Ω–µ–µ.')


def refresh(update: Update, context: CallbackContext):
    query: CallbackQuery = update.callback_query
    user_id = query.message.chat.id
    if user_id not in last_refresh or time.time() - last_refresh[user_id] > COOLDOWN:
        last_refresh[user_id] = time.time()
        user = get_user(user_id)
        selected_campus = user['campus']
        selected_program = user['program']
        try:
            message = program_board(selected_campus, selected_program, user)
        except:
            print(traceback.format_exc())
        keyboard_inline = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="update")],
                           [InlineKeyboardButton("üìä –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ", callback_data="rating")]]
        if 'fio' in user:
            keyboard_inline = keyboard_inline[:-1]
            keyboard_inline[0].append(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞", callback_data="change_abit"))
        query.edit_message_text(text=message, parse_mode=ParseMode.HTML,
                                reply_markup=InlineKeyboardMarkup(keyboard_inline))
        query.answer(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    else:
        query.answer(text=f'–ù–µ —Ç–∞–∫ —á–∞—Å—Ç–æ! '
                          f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {COOLDOWN - math.ceil(time.time() - last_refresh[user_id])} —Å–µ–∫—É–Ω–¥.')


def rating(update: Update, context: CallbackContext):
    query: CallbackQuery = update.callback_query
    user_id = query.message.chat.id
    user = get_user(user_id)
    if 'fio' in user:
        refresh(update, context)
    else:
        keyboard = [[InlineKeyboardButton('–ù–∞–π—Ç–∏', switch_inline_query_current_chat='–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å —Å–≤–æ—ë –∏–º—è: ')]]
        msg_id = context.bot.send_message(user_id,
                                          '–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞',
                                          reply_markup=InlineKeyboardMarkup(keyboard)).message_id
        set_user_param(user_id, 'bot_temp_message_id', msg_id)
        set_state(user_id, SET_FIO)


def change_abit(update: Update, context: CallbackContext):
    query: CallbackQuery = update.callback_query
    user_id = query.message.chat.id
    keyboard = [[InlineKeyboardButton('–ù–∞–π—Ç–∏', switch_inline_query_current_chat='–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å —Å–≤–æ—ë –∏–º—è: ')]]
    msg_id = context.bot.send_message(user_id,
                                      '–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞',
                                      reply_markup=InlineKeyboardMarkup(keyboard)).message_id
    set_user_param(user_id, 'bot_temp_message_id', msg_id)
    set_state(user_id, SET_FIO)


def edu_form(data: dict):
    result = {'–ë': [], '–ö': [], '–ë,–ö': []}
    for abit, data in zip(data.keys(), data.values()):
        result[data['edu_form']].append(abit)
    return result


def program_stats(xls_id: int):
    try:
        req = requests.get(f'https://priem8.hse.ru/abitreports/bachreports/{xls_id}.xls')
    except urllib3.connection.VerifiedHTTPSConnection as e:
        raise Exception(e)
    if req.status_code != 200:
        raise Exception(f"Status code {req.status_code}")
    book = xlrd.open_workbook(file_contents=req.content)
    sheet = book.sheet_by_index(0)
    info = sheet.cell_value(3, 1).split('\n')
    result = {'year': info[0].strip().split(': ')[-1],
              'govsponsor': info[1].strip().split(': ')[-1],
              'hsesponsor': info[2].strip().split(': ')[-1],
              'paid': info[3].split(': ')[-1],
              'hsetime': sheet.cell_value(4, 1).strip().split(': ')[-1]}
    for key in result:
        if result[key] and result[key].isdigit():
            result[key] = int(result[key])
        elif key not in ['hsetime']:
            result[key] = 0
    return result


def inlinequery(update: Update, context: CallbackContext):
    query = update.inline_query.query
    if query.startswith('–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ: '):
        query = query.replace('–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ: ', '').lower()
        results = []
        result = users.find_one({'user_id': update.inline_query.from_user.id})
        if not result:
            return
        user_campus = result['campus']
        for program in parser.programs[parser.campus_id[user_campus]]:
            if query in program.lower() or query == '–≤—Å–µ':
                results.append(InlineQueryResultArticle(
                    id=uuid4(),
                    title=program,
                    input_message_content=InputTextMessageContent(program)))
        update.inline_query.answer(results[:50])
        set_state(update.inline_query.from_user.id, SET_PROGRAM)
    elif query.startswith('–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å —Å–≤–æ—ë –∏–º—è: '):
        query = query.replace('–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å —Å–≤–æ—ë –∏–º—è: ', '').lower()
        user = get_user(update.inline_query.from_user.id)
        xls_id = parser.programs[parser.campus_id[user['campus']]][user['program']]
        abits = parser.get_abits(xls_id)
        results = []
        for abit in abits:
            if query in abit.lower() or query == '–≤—Å–µ':
                results.append(InlineQueryResultArticle(
                    id=uuid4(),
                    title=abit,
                    input_message_content=InputTextMessageContent('–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç: ' + abit)))
        update.inline_query.answer(results[:50])


def close(update: Update, context: CallbackContext):
    query = update.callback_query
    context.bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    query.answer()


if __name__ == '__main__':
    last_refresh = {}
    logger = logging.getLogger("BOT")
    logging.getLogger("requests").setLevel(logging.WARNING)
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    ch.setFormatter(formatter)
    logger.addHandler(ch)
    logger.setLevel(logging.INFO)
    parser.update_data()
    parser.admission_data()
    mongo = pymongo.MongoClient(os.environ.get('mongo_uri'))
    db = mongo['hse-abit']
    users: Collection = db['users']
    state: Collection = db['state']
    updater: Updater = Updater(os.environ["token"], use_context=True)
    updater.dispatcher.add_error_handler(error)
    updater.dispatcher.add_handler(CommandHandler('start', start))
    updater.dispatcher.add_handler(CommandHandler('restart', start))
    updater.dispatcher.add_handler(MessageHandler(Filters.regex(f'({"|".join(CAMPUSES)})'), set_campus))
    updater.dispatcher.add_handler(MessageHandler(Filters.regex(f'^–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç: .*$'), set_abit))
    merged_programs = set(list(list(parser.programs.values())[0].keys())
                          + list(list(parser.programs.values())[1].keys())
                          + list(list(parser.programs.values())[2].keys())
                          + list(list(parser.programs.values())[3].keys()))
    updater.dispatcher.add_handler(MessageHandler(Filters.regex(f'({"|".join(merged_programs)})'), set_program))
    updater.dispatcher.add_handler(InlineQueryHandler(inlinequery))
    updater.dispatcher.add_handler(CallbackQueryHandler(callback=refresh, pattern='^update$'))
    updater.dispatcher.add_handler(CallbackQueryHandler(callback=rating, pattern='^rating'))
    updater.dispatcher.add_handler(CallbackQueryHandler(callback=close, pattern='^close'))
    updater.dispatcher.add_handler(CallbackQueryHandler(callback=change_abit, pattern='^change_abit'))
    updater.start_polling()
    updater.idle()
