import logging
import math
import os
import time
import traceback
from datetime import datetime
from typing import Any, List, Dict
from uuid import uuid4

import pymongo
import requests
import urllib3
import xlrd
import xmltodict
from pymongo.collection import Collection
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, \
    InlineQueryResultArticle, InputTextMessageContent, CallbackQuery, ParseMode
from telegram.ext import Updater, CallbackContext, CommandHandler, MessageHandler, Filters, InlineQueryHandler, \
    CallbackQueryHandler

COOLDOWN = 15
CLOSE_MARKUP = InlineKeyboardMarkup([[InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å', callback_data='close')]])
NOT_IMPLEMENTED = '–°–ø–∞—Å–∏–±–æ. –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
CAMPUSES = ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ü–µ—Ä–º—å']
SET_CAMPUS = 0
SET_PROGRAM = 1
SET_FIO = 2
LOOK_PROGRAM = 3


def error(update: Update, context: CallbackContext):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)


def start(update: Update, context: CallbackContext):
    keyboard = [[CAMPUSES[i], CAMPUSES[i + 1]] for i in range(0, len(CAMPUSES), 2)]
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø—É—Å', reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    state.delete_one({'user_id': update.message.chat.id})
    users.delete_one({'user_id': update.message.chat.id})
    set_state(update.message.chat.id, SET_CAMPUS)


def get_state(user_id: int):
    user_state = state.find_one({'user_id': user_id})
    if user_state:
        return user_state['state']


def set_state(user_id: int, new_state: int):
    if not state.find_one_and_update({'user_id': user_id}, {'$set': {'state': new_state}}):
        state.insert_one({'user_id': user_id, 'state': new_state})


def get_user(user_id: int):
    return users.find_one({'user_id': user_id})


def set_user_param(user_id: int, key: str, value: Any):
    return users.find_one_and_update({'user_id': user_id}, {'$set': {key: value}})


def set_campus(update: Update, context: CallbackContext):
    selected_campus = update.message.text
    user_state = get_state(update.message.chat.id)
    if user_state == SET_CAMPUS:
        users.insert_one({'user_id': update.message.chat.id,
                          'username': update.message.chat.username,
                          'campus': selected_campus})
        keyboard = [[InlineKeyboardButton('–ù–∞–π—Ç–∏', switch_inline_query_current_chat='–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ: ')]]
        ReplyKeyboardRemove()
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text('–°–ø–∞—Å–∏–±–æ', reply_markup=ReplyKeyboardRemove())
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏', reply_markup=reply_markup)
        set_state(update.message.chat.id, SET_PROGRAM)
    else:
        update.message.reply_text('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start')


def set_abit(update: Update, context: CallbackContext):
    selected_abit = update.message.text.replace('–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç: ', '')
    user_state = get_state(update.message.chat.id)
    if user_state == SET_FIO:
        set_user_param(update.message.chat.id, 'fio', selected_abit)
        update.message.reply_text('–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –≤ –ø—Ä–æ—à–ª–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.', reply_markup=CLOSE_MARKUP)
        context.bot.delete_message(update.message.chat.id, update.message.message_id)
        context.bot.delete_message(update.message.chat.id, get_user(update.message.chat.id)['bot_temp_message_id'])
    else:
        update.message.reply_text('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start')


def program_board(campus: str, program: str, user: dict):
    xls_id = programs[campus_id[campus]][program]
    abits = get_abits(xls_id)
    stats = program_stats(xls_id)
    edu_form_data = edu_form(abits)
    if len(bvi(abits)) <= stats["govsponsor"]:
        is_kvazi = f'‚úÖ –í—Å–µ –±–≤–∏ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –±—é–¥–∂–µ—Ç –∑–∞ —Å—á–µ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞' \
                   f' (—Å–≤–æ–±–æ–¥–Ω–æ {stats["govsponsor"] - len(bvi(abits))} –º–µ—Å—Ç)'
    else:
        is_kvazi = '‚ùå –ë–≤–∏ –Ω–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –±—é–¥–∂–µ—Ç –∑–∞ —Å—á–µ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞, ' \
                   '–ø–æ—Å–ª–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ç–æ-—Ç–æ –ø–æ–ø–∞–¥–µ—Ç –Ω–∞ –±—é–¥–∂–µ—Ç –∑–∞ —Å—á—ë—Ç –≤—ã—à–∫–∏.'
    if max(0, len(edu_form_data["–ë,–ö"]) - stats["govsponsor"] - len(bvi(abits))) + len(edu_form_data["–ö"]) \
            <= stats["paid"]:
        no_paid_competition = '‚úÖ –ù–µ—Ç –∫–æ–Ω–∫—É—Ä—Å–∞ –Ω–∞ –ø–ª–∞—Ç–Ω–æ–µ (–∫–æ–ª-–≤–æ –ø—Ä–µ—Ç–µ–Ω–¥—É—é—â–∏—Ö –º–µ–Ω—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç)'
    else:
        no_paid_competition = '‚ùì –í–æ–∑–º–æ–∂–µ–Ω –∫–æ–Ω–∫—É—Ä—Å –Ω–∞ –ø–ª–∞—Ç–Ω–æ–µ (–ë,–ö + –ö > –∫–æ–ª-–≤–æ –º–µ—Å—Ç)'
    xls_url = f'https://priem8.hse.ru/abitreports/bachreports/{xls_id}.xls'
    non_bvi = set(abits.keys()).difference(bvi(abits))
    govsponsor = [{'fio': abit, **abits[abit]} for abit in non_bvi.difference(edu_form_data["–ö"])]
    govsponsor_minus_bvi = [abit for abit in govsponsor if not abit['bvi']]
    govsponsor.sort(key=lambda f: -f['score'])
    non_bvi_places = stats["govsponsor"] - len(bvi(abits))
    if len(govsponsor_minus_bvi) <= non_bvi_places and govsponsor:
        govsponsor_score = govsponsor[-1]
    else:
        if govsponsor_minus_bvi:
            govsponsor_score = govsponsor_minus_bvi[non_bvi_places - 1]
        else:
            govsponsor_score = '–Ω–∞ –±—é–¥–∂–µ—Ç –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–µ—Ç'
    if non_bvi_places == 0:
        govsponsor_score = '–±–≤–∏ (–æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –±–æ—Ç –Ω–µ —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–≤–∞–∑–∏-–±—é–¥–∂–µ—Ç–æ–º)'
    elif type(govsponsor_score) == dict:
        govsponsor_score = str(int(govsponsor_score['score']))
    with_soglasie_minus_bvi = [abit for abit in govsponsor if not abit['bvi'] and abit['agreement'] == '–î–∞']
    if len(with_soglasie_minus_bvi) <= non_bvi_places:
        govsponsor_soglasie_score = int(with_soglasie_minus_bvi[-1]['score'])
    else:
        if with_soglasie_minus_bvi:
            govsponsor_soglasie_score = int(with_soglasie_minus_bvi[non_bvi_places - 1]['score'])
        else:
            govsponsor_soglasie_score = '–Ω–∞ –±—é–¥–∂–µ—Ç –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–µ—Ç'
    if non_bvi_places == 0:
        govsponsor_soglasie_score = '–±–≤–∏ (–æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –±–æ—Ç –Ω–µ —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–≤–∞–∑–∏-–±—é–¥–∂–µ—Ç–æ–º)'
    place = ''
    sogl_place = ''
    for_user = ''
    govsponsor_sogl = [abit for abit in govsponsor if abit['agreement'] == '–î–∞']

    if 'fio' in user and user['fio'] in [abit['fio'] for abit in govsponsor] + bvi(abits):
        user_abit = {}
        for fio, abit in zip(abits.keys(), abits.values()):
            if fio == user['fio']:
                user_abit = abit
                break
        sogl_place = 1 + len(bvi(abits))
        for_user = f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç: {user['fio']}\n"
        for abit in govsponsor_sogl:
            if abit['score'] >= get_score(abits, user['fio']) and abit['fio'] != user['fio'] and not abit['bvi']:
                sogl_place += 1
        sogl_place = f"    –ë—é–¥–∂–µ—Ç —Å —Å–æ–≥–ª–∞—Å–∏–µ–º: {sogl_place}\n"
        if user_abit['bvi']:
            sogl_place = f"    üëç –í—ã –ø–æ—Å—Ç—É–ø–∞–µ—Ç–µ –ø–æ –ë–í–ò\n"
        for i, abit in enumerate(govsponsor):
            if abit['fio'] == user['fio']:
                place = f"    –ë—é–¥–∂–µ—Ç: {i + 1}\n"
    your_place = 'üë§ –í–∞—à–∏ –º–µ—Å—Ç–∞:\n' + place + sogl_place if len(place + sogl_place) > 0 else ''
    message = f'–í—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ <a href="{xls_url}">"{program}" ({campus})</a>\n\n' \
              f'üìÑ –í—Å–µ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏–π: {len(abits)}\n' \
              f'üò≥ –ë—é–¥–∂–µ—Ç: {len(edu_form_data["–ë"])} (–±–≤–∏ {len(bvi(abits))}, ' \
              f'–≤—Å–µ–≥–æ {stats["govsponsor"]} + {stats["hsesponsor"]} –∑–∞ —Å—á—ë—Ç –í–®–≠)\n' \
              f'üí∞ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {len(edu_form_data["–ö"])} (–≤—Å–µ–≥–æ {stats["paid"]})\n' \
              f'ü§ë –ë—é–¥–∂–µ—Ç, –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {len(edu_form_data["–ë,–ö"])}\n' \
              f'ü§ù –° —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ: {len(soglasie(abits))}\n' \
              f'üèö –° –æ–±—â–µ–∂–∏—Ç–∏–µ–º: {len(dormitory(abits))}\n' \
              f'üè≠ –¶–µ–ª–µ–≤–æ–µ: {len(celevoe(abits))}\n\n' \
              f'{is_kvazi}\n' \
              f'{no_paid_competition}\n\n' \
              f'<code>üìä –ü—Ä–æ—Ö–æ–¥–Ω—ã–µ –±—é–¥–∂–µ—Ç:\n' \
              f'    –û–±—â–∏–π: {govsponsor_score}\n' \
              f'    –ü–æ —Å–æ–≥–ª–∞—Å–∏—è–º: {govsponsor_soglasie_score}\n' \
              f'{your_place}</code>' \
              f'{for_user}' \
              f'üïî –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {datetime.now().strftime("%d.%m.%Y %H:%M:%S")} (–±–∞–∑–∞ –í–®–≠: {stats["hsetime"]})'
    return message


def set_program(update: Update, context: CallbackContext):
    selected_program = update.message.text
    user_state = get_state(update.message.chat.id)
    if user_state == SET_PROGRAM:
        users.find_one_and_update({'user_id': update.message.chat.id}, {'$set': {'program': selected_program}})
        user = get_user(update.message.chat.id)
        selected_campus = user['campus']
        try:
            message = program_board(selected_campus, selected_program, user)
            keyboard_inline = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="update")],
                               [InlineKeyboardButton("üìä –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ", callback_data="rating")]]
            update.message.reply_text(message,
                                      reply_markup=InlineKeyboardMarkup(keyboard_inline),
                                      parse_mode=ParseMode.HTML)
            set_state(update.message.chat.id, LOOK_PROGRAM)
        except Exception as e:
            print(traceback.format_exc())
            update.message.reply_text('–û–π! –ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ –í–®–≠. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–¥–Ω–µ–µ.')


def refresh(update: Update, context: CallbackContext):
    query: CallbackQuery = update.callback_query
    user_id = query.message.chat.id
    if user_id not in last_refresh or time.time() - last_refresh[user_id] > COOLDOWN:
        last_refresh[user_id] = time.time()
        user = get_user(user_id)
        selected_campus = user['campus']
        selected_program = user['program']
        message = program_board(selected_campus, selected_program, user)
        keyboard_inline = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="update")],
                           [InlineKeyboardButton("üìä –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ", callback_data="rating")]]
        if 'fio' in user:
            keyboard_inline = keyboard_inline[:-1]
            keyboard_inline[0].append(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞", callback_data="change_abit"))
        query.edit_message_text(text=message, parse_mode=ParseMode.HTML,
                                reply_markup=InlineKeyboardMarkup(keyboard_inline))
        query.answer(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    else:
        query.answer(text=f'–ù–µ —Ç–∞–∫ —á–∞—Å—Ç–æ! '
                          f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {COOLDOWN - math.ceil(time.time() - last_refresh[user_id])} —Å–µ–∫—É–Ω–¥.')


def rating(update: Update, context: CallbackContext):
    query: CallbackQuery = update.callback_query
    user_id = query.message.chat.id
    user = get_user(user_id)
    if 'fio' in user:
        refresh(update, context)
    else:
        keyboard = [[InlineKeyboardButton('–ù–∞–π—Ç–∏', switch_inline_query_current_chat='–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å —Å–≤–æ—ë –∏–º—è: ')]]
        msg_id = context.bot.send_message(user_id,
                                          '–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞',
                                          reply_markup=InlineKeyboardMarkup(keyboard)).message_id
        set_user_param(user_id, 'bot_temp_message_id', msg_id)
        set_state(user_id, SET_FIO)


def change_abit(update: Update, context: CallbackContext):
    query: CallbackQuery = update.callback_query
    user_id = query.message.chat.id
    keyboard = [[InlineKeyboardButton('–ù–∞–π—Ç–∏', switch_inline_query_current_chat='–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å —Å–≤–æ—ë –∏–º—è: ')]]
    msg_id = context.bot.send_message(user_id,
                                      '–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞',
                                      reply_markup=InlineKeyboardMarkup(keyboard)).message_id
    set_user_param(user_id, 'bot_temp_message_id', msg_id)
    set_state(user_id, SET_FIO)


def get_score(abits: List[Dict[str, Any]], fio: str):
    for abit in abits:
        if abit == fio:
            return abits[abit]['score']
    return -1


def bvi(data: dict):
    result = []
    for abit, data in zip(data.keys(), data.values()):
        if data['bvi']:
            result.append(abit)
    return result


def soglasie(data: dict):
    result = []
    for abit, data in zip(data.keys(), data.values()):
        if data['agreement'] == '–î–∞':
            result.append({'fio': abit, **data})
    return result


def dormitory(data: dict):
    result = []
    for abit, data in zip(data.keys(), data.values()):
        if data['dormitory'] == '+':
            result.append(abit)
    return result


def celevoe(data: dict):
    result = []
    for abit, data in zip(data.keys(), data.values()):
        if data['celevoi'] == '+':
            result.append(abit)
    return result


def edu_form(data: dict):
    result = {'–ë': [], '–ö': [], '–ë,–ö': []}
    for abit, data in zip(data.keys(), data.values()):
        result[data['edu_form']].append(abit)
    return result


def program_stats(xls_id: int):
    try:
        req = requests.get(f'https://priem8.hse.ru/abitreports/bachreports/{xls_id}.xls')
    except urllib3.connection.VerifiedHTTPSConnection as e:
        raise Exception(e)
    if req.status_code != 200:
        raise Exception(f"Status code {req.status_code}")
    book = xlrd.open_workbook(file_contents=req.content)
    sheet = book.sheet_by_index(0)
    info = sheet.cell_value(3, 1).split('\n')
    result = {'year': info[0].strip().split(': ')[-1],
              'govsponsor': info[1].strip().split(': ')[-1],
              'hsesponsor': info[2].strip().split(': ')[-1],
              'paid': info[3].split(': ')[-1],
              'hsetime': sheet.cell_value(4, 1).strip().split(': ')[-1]}
    for key in result:
        if result[key] and result[key].isdigit():
            result[key] = int(result[key])
        elif key not in ['hsetime']:
            result[key] = 0
    return result


def get_abits(xls_id: int):
    try:
        req = requests.get(f'https://priem8.hse.ru/abitreports/bachreports/{xls_id}.xls')
    except urllib3.connection.VerifiedHTTPSConnection as e:
        raise Exception(e)
    if req.status_code != 200:
        raise Exception(f"Status code {req.status_code}")
    book = xlrd.open_workbook(file_contents=req.content)
    sheet = book.sheet_by_index(0)
    sum_ind = -1
    edu_form = -1
    dominatory = -1
    for i in range(sheet.ncols):
        value = sheet.cell_value(6, i)
        if value == '–°—É–º–º–∞ –∫–æ–Ω–∫—É—Ä—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤':
            sum_ind = i
        elif value == '–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è':
            edu_form = i
        elif value == '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—â–µ–∂–∏—Ç–∏–µ –Ω–∞ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è':
            dominatory = i
    FIRST_ABIT_IND = 8
    abits = {}
    for i in range(FIRST_ABIT_IND, sheet.nrows):
        abit_fio = sheet.cell_value(i, 2)
        abit_score = sheet.cell_value(i, sum_ind)
        abit_bvi = sheet.cell_value(i, 3)
        abit_osoboe_pravo = sheet.cell_value(i, 4)
        abit_celevoi = sheet.cell_value(i, 5)
        abit_agreement = sheet.cell_value(i, 6)
        abit_edu_form = sheet.cell_value(i, edu_form)
        abit_dormitory = sheet.cell_value(i, dominatory)
        abits[abit_fio] = {'score': abit_score,
                           'bvi': abit_bvi,
                           'osoboe_pravo': abit_osoboe_pravo,
                           'celevoi': abit_celevoi,
                           'agreement': abit_agreement,
                           'edu_form': abit_edu_form,
                           'dormitory': abit_dormitory}
    return abits


def inlinequery(update: Update, context: CallbackContext):
    query = update.inline_query.query
    if query.startswith('–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ: '):
        query = query.replace('–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ: ', '').lower()
        results = []
        result = users.find_one({'user_id': update.inline_query.from_user.id})
        if not result:
            return
        user_campus = result['campus']
        for program in programs[campus_id[user_campus]]:
            if query in program.lower() or query == '–≤—Å–µ':
                results.append(InlineQueryResultArticle(
                    id=uuid4(),
                    title=program,
                    input_message_content=InputTextMessageContent(program)))
        update.inline_query.answer(results[:50])
        set_state(update.inline_query.from_user.id, SET_PROGRAM)
    elif query.startswith('–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å —Å–≤–æ—ë –∏–º—è: '):
        query = query.replace('–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å —Å–≤–æ—ë –∏–º—è: ', '').lower()
        user = get_user(update.inline_query.from_user.id)
        xls_id = programs[campus_id[user['campus']]][user['program']]
        abits = get_abits(xls_id)
        results = []
        for abit in abits:
            if query in abit.lower() or query == '–≤—Å–µ':
                results.append(InlineQueryResultArticle(
                    id=uuid4(),
                    title=abit,
                    input_message_content=InputTextMessageContent('–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç: ' + abit)))
        update.inline_query.answer(results[:50])


def close(update: Update, context: CallbackContext):
    query = update.callback_query
    context.bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    query.answer()


def update_data():
    global programs, campus_id
    parse_request = None
    while True:
        try:
            parse_request = requests.post('https://priem8.hse.ru/hseAnonymous/batch.xml', data={
                'query': '<root><query class="TTimePoint" fetchall="1"><item part="0" name="Passed"/>'
                         '<item part="0" name="Name"/><item part="1" name="Master$N" value="BachAbitAdmission"/>'
                         '</query><query class="TRegDepartment" fetchall="1"><item part="0" name="ID"/>'
                         '<item part="0" name="Description"/><item part="1" name="AdmModeratorPosition" value="*"/>'
                         '<item part="2" name="IsCentral" special="7"/><item part="2" name="AdmModeratorPosition"/>'
                         '</query><query class="TBachCompetition" fetchall="1">'
                         '<item part="0" name="ID"/><item part="0" name="OfficialName"/>'
                         '<item part="0" name="LearnProgram$D"/>'
                         '<item part="0" name="RegDepartment"/>'
                         '<item part="0" name="ForeignExams"/><item part="1" name="Master" value="3656465518"/>'
                         '<item part="1" name="NotPublishLists" value="0"/><item part="2" name="OfficialName"/>'
                         '<item part="2" name="LearnProgram$D"/></query></root>'})
            break
        except requests.exceptions.ConnectionError:
            logger.info("–ü—ã—Ç–∞—é—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∞–π—Ç—É –í–®–≠...")
            time.sleep(0.5)
    res = xmltodict.parse(parse_request.text)['batch']['data']
    campus_id = {}
    for campus in res[1]['row']:
        campus_id[campus['Description'].replace('–ù–ò–£ –í–®–≠ - ', '')] = campus['ID']['#text']
    programs = dict.fromkeys(campus_id.values(), None)
    for program in res[2]['row']:
        if not programs[program['RegDepartment']['#text']]:
            programs[program['RegDepartment']['#text']] = {}
        programs[program['RegDepartment']['#text']][program['LearnProgram-D']] = program['ID']['#text']


if __name__ == '__main__':
    programs = {}
    campus_id = {}
    last_refresh = {}
    logger = logging.getLogger("BOT")
    logging.getLogger("requests").setLevel(logging.WARNING)
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    ch.setFormatter(formatter)
    logger.addHandler(ch)
    logger.setLevel(logging.INFO)
    update_data()
    mongo = pymongo.MongoClient(os.environ.get('mongo_uri'))
    db = mongo['hse-abit']
    users: Collection = db['users']
    state: Collection = db['state']
    updater: Updater = Updater(os.environ["token"], use_context=True)
    updater.dispatcher.add_error_handler(error)
    updater.dispatcher.add_handler(CommandHandler('start', start))
    updater.dispatcher.add_handler(CommandHandler('restart', start))
    updater.dispatcher.add_handler(MessageHandler(Filters.regex(f'({"|".join(CAMPUSES)})'), set_campus))
    updater.dispatcher.add_handler(MessageHandler(Filters.regex(f'^–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç: .*$'), set_abit))
    merged_programs = set(list(list(programs.values())[0].keys())
                          + list(list(programs.values())[1].keys())
                          + list(list(programs.values())[2].keys())
                          + list(list(programs.values())[3].keys()))
    updater.dispatcher.add_handler(MessageHandler(Filters.regex(f'({"|".join(merged_programs)})'), set_program))
    updater.dispatcher.add_handler(InlineQueryHandler(inlinequery))
    updater.dispatcher.add_handler(CallbackQueryHandler(callback=refresh, pattern='^update$'))
    updater.dispatcher.add_handler(CallbackQueryHandler(callback=rating, pattern='^rating'))
    updater.dispatcher.add_handler(CallbackQueryHandler(callback=close, pattern='^close'))
    updater.dispatcher.add_handler(CallbackQueryHandler(callback=change_abit, pattern='^change_abit'))
    updater.start_polling()
    updater.idle()
